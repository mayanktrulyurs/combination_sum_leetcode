// T.C. O(2^t * K) or simply write O(2^N * K) since for N no. of elements each element has 2 options i.e. pick/not-pick, and it does take some time to insert the combinations into our final answer, so assuming the size of each combination to be K, so it will take K time to do the insertion

// T.C. : O(x * K) since we are not sure on how many combinations will be formed in this case, so assume there are x combinations where K is the avg. size of each combination

class Solution {
public:

    void f(int idx, int target, vector<int>& ds, vector<vector<int>>& ans, vector<int>& candidates){

        if (idx==candidates.size()){
            if (target==0){
                ans.push_back(ds);
            }
            return;
            
            
        }

        if (candidates[idx]<=target){
            ds.push_back(candidates[idx]);
            f(idx,target-candidates[idx],ds,ans,candidates);
            ds.pop_back();
        }
        f(idx+1,target,ds,ans,candidates);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {

        vector<vector<int>>ans;
        vector<int>ds;

        f(0,target,ds,ans,candidates);
        return ans;
    }
};